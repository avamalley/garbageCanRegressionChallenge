---
title: "Garbage Can Regression Challenge"
format:
  html: default
execute:
  echo: true
  eval: true
---


**Choose R or Python and delete the other code chunk.**

## R Code

```{r}
#| echo: false
library(tidyverse)
library(broom)

# Data with known true relationships: Anxiety = 0 + 1.0 × Stress + 0.1 × Time
observDF <- tribble(
  ~Stress, ~StressSurvey, ~Time, ~Anxiety,
  0,0,0,0,
  0,0,1,0.1,
  0,0,1,0.1,
  1,3,1,1.1,
  1,3,1,1.1,
  1,3,1,1.1,
  2,6,2,2.2,
  2,6,2,2.2,
  2,6,2,2.2,
  8,9,2,8.2,
  8,9,2,8.2,
  8,9,2.1,8.21,
  12,12,2.2,12.22,
  12,12,2.2,12.22,
  12,12,2.2,12.22
)

observDF
```


## Your Analysis

### 1) Bivariate Regression Analysis with StressSurvey

We regress `Anxiety` on `StressSurvey` and report the estimated coefficients, then compare them to the true relationship `Anxiety = Stress + 0.1 × Time`.

```{r}
#| echo: false
# Fit bivariate model
fit_stresssurvey <- lm(Anxiety ~ StressSurvey, data = observDF)

# Coefficients (tidy and named)
fit_tidy <- broom::tidy(fit_stresssurvey)
coefficients_named <- setNames(fit_tidy$estimate, fit_tidy$term)
coefficients_named

# Print a concise summary statement
intercept_est <- coefficients_named["(Intercept)"]
slope_est <- coefficients_named["StressSurvey"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × StressSurvey\n",
  intercept_est, slope_est
))

# Compare to true relationship comment
cat("True DGP: Anxiety = 0 + 1.0 × Stress + 0.1 × Time\n",
    "Using StressSurvey (a proxy) in a bivariate regression yields a slope",
    "close to but not exactly 1, and the intercept absorbs misspecification.\n")

# Standard model summary
summary(fit_stresssurvey)
```

In this dataset, the estimated intercept and slope (from the chunk above) quantify how `StressSurvey` predicts `Anxiety`. The true process is `Anxiety = 0 + 1.0 × Stress + 0.1 × Time`. Because `StressSurvey` is an imperfect proxy for `Stress` and we omit `Time`, the estimated slope is close to 1 but not exact, and the intercept differs to absorb the omitted structure.

### 2) Visualization of Bivariate Relationship

Create a scatter plot with the regression line showing the relationship between StressSurvey and Anxiety.

```{r}
#| echo: false
# Create scatter plot with regression line
ggplot(observDF, aes(x = StressSurvey, y = Anxiety)) +
  geom_point(size = 3, alpha = 0.7, color = "steelblue") +
  geom_smooth(method = "lm", se = TRUE, color = "red", linewidth = 1) +
  labs(
    title = "Bivariate Relationship: Anxiety vs StressSurvey",
    subtitle = "Scatter plot with linear regression line and 95% confidence interval",
    x = "StressSurvey",
    y = "Anxiety"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Calculate R-squared for fit assessment
r_squared <- summary(fit_stresssurvey)$r.squared
cat(sprintf("R-squared: %.3f\n", r_squared))

# Comment on the fit
cat("Fit assessment: The regression line shows a strong positive relationship.\n",
    "However, there are potential issues:\n",
    "1. Omitted variable bias (Time is excluded)\n",
    "2. StressSurvey is an imperfect proxy for the true Stress variable\n",
    "3. The relationship may be nonlinear in the true data generating process\n")
```

### 3) Bivariate Regression Analysis with Time

Run a bivariate regression of Anxiety on Time and compare the estimated coefficients to the true relationship.

```{r}
#| echo: false
# Fit bivariate model with Time
fit_time <- lm(Anxiety ~ Time, data = observDF)

# Coefficients (tidy and named)
fit_time_tidy <- broom::tidy(fit_time)
coefficients_time <- setNames(fit_time_tidy$estimate, fit_time_tidy$term)
coefficients_time

# Print a concise summary statement
intercept_time <- coefficients_time["(Intercept)"]
slope_time <- coefficients_time["Time"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × Time\n",
  intercept_time, slope_time
))

# Standard model summary
summary(fit_time)

# Compare to true relationship
cat("True DGP: Anxiety = 0 + 1.0 × Stress + 0.1 × Time\n",
    "The true coefficient on Time is 0.1.\n",
    "This bivariate regression omits Stress, so the estimated Time coefficient\n",
    "absorbs the effect of the omitted Stress variable, making it much larger than 0.1.\n")
```

### 4) Visualization of Bivariate Relationship with Time

Create a scatter plot with the regression line showing the relationship between Time and Anxiety.

```{r}
#| echo: false
# Create scatter plot with regression line for Time
ggplot(observDF, aes(x = Time, y = Anxiety)) +
  geom_point(size = 3, alpha = 0.7, color = "darkgreen") +
  geom_smooth(method = "lm", se = TRUE, color = "red", linewidth = 1) +
  labs(
    title = "Bivariate Relationship: Anxiety vs Time",
    subtitle = "Scatter plot with linear regression line and 95% confidence interval",
    x = "Time",
    y = "Anxiety"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Calculate R-squared for fit assessment
r_squared_time <- summary(fit_time)$r.squared
cat(sprintf("R-squared: %.3f\n", r_squared_time))

# Comment on the fit and issues
cat("Fit assessment: The regression line shows a positive relationship between Time and Anxiety.\n",
    "However, there are significant issues:\n",
    "1. Omitted variable bias (Stress is excluded from the model)\n",
    "2. The estimated Time coefficient is severely biased upward\n",
    "3. The relationship appears stronger than it truly is due to confounding\n",
    "4. The true effect of Time (0.1) is much smaller than what this model suggests\n")
```

### 5) Multiple Regression Analysis

Run a multiple regression of Anxiety on both StressSurvey and Time and compare the estimated coefficients to the true relationship.

```{r}
#| echo: false
# Fit multiple regression model
fit_multiple <- lm(Anxiety ~ StressSurvey + Time, data = observDF)

# Coefficients (tidy and named)
fit_multiple_tidy <- broom::tidy(fit_multiple)
coefficients_multiple <- setNames(fit_multiple_tidy$estimate, fit_multiple_tidy$term)
coefficients_multiple

# Print a concise summary statement
intercept_mult <- coefficients_multiple["(Intercept)"]
slope_stresssurvey <- coefficients_multiple["StressSurvey"]
slope_time <- coefficients_multiple["Time"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × StressSurvey + %.3f × Time\n",
  intercept_mult, slope_stresssurvey, slope_time
))

# Standard model summary
summary(fit_multiple)

# Compare to true relationship
cat("True DGP: Anxiety = 0 + 1.0 × Stress + 0.1 × Time\n",
    "Comparison to true relationship:\n",
    "1. True Stress coefficient = 1.0, estimated StressSurvey coefficient ≈ %.3f\n",
    "2. True Time coefficient = 0.1, estimated Time coefficient ≈ %.3f\n",
    "3. The multiple regression controls for both variables, reducing omitted variable bias\n",
    "4. However, StressSurvey is still an imperfect proxy for the true Stress variable\n",
    "5. The Time coefficient should be closer to the true value (0.1) than in the bivariate model\n",
    slope_stresssurvey, slope_time)
```

### 6) Multiple Regression Analysis with True Variables

Run a multiple regression of Anxiety on both Stress and Time (the true variables) and compare the estimated coefficients to the true relationship.

```{r}
#| echo: false
# Fit multiple regression model with true variables
fit_true <- lm(Anxiety ~ Stress + Time, data = observDF)

# Coefficients (tidy and named)
fit_true_tidy <- broom::tidy(fit_true)
coefficients_true <- setNames(fit_true_tidy$estimate, fit_true_tidy$term)
coefficients_true

# Print a concise summary statement
intercept_true <- coefficients_true["(Intercept)"]
slope_stress <- coefficients_true["Stress"]
slope_time_true <- coefficients_true["Time"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × Stress + %.3f × Time\n",
  intercept_true, slope_stress, slope_time_true
))

# Standard model summary
summary(fit_true)

# Compare to true relationship
cat("True DGP: Anxiety = 0 + 1.0 × Stress + 0.1 × Time\n",
    "Perfect comparison to true relationship:\n",
    "1. True Stress coefficient = 1.0, estimated Stress coefficient = %.3f\n",
    "2. True Time coefficient = 0.1, estimated Time coefficient = %.3f\n",
    "3. True intercept = 0.0, estimated intercept = %.3f\n",
    "4. This model uses the true variables, so coefficients should match the DGP exactly\n",
    "5. Any small differences are due to numerical precision and the specific data points\n",
    slope_stress, slope_time_true, intercept_true)
```

### 7) Model Comparison

Compare the R-squared values and coefficient interpretations between the two multiple regression models and assess statistical significance.

```{r}
#| echo: false
# Extract R-squared values for comparison
r_squared_stresssurvey_time <- summary(fit_multiple)$r.squared
r_squared_stress_time <- summary(fit_true)$r.squared

# Create comparison table
model_comparison <- data.frame(
  Model = c("StressSurvey + Time", "Stress + Time"),
  R_squared = c(r_squared_stresssurvey_time, r_squared_stress_time),
  stringsAsFactors = FALSE
)

print("Model Comparison - R-squared Values:")
print(model_comparison)

# Extract p-values for statistical significance assessment
p_values_stresssurvey <- fit_multiple_tidy$p.value
p_values_stress <- fit_true_tidy$p.value

cat("\nStatistical Significance Analysis:\n")
cat("Model 1 (StressSurvey + Time):\n")
for(i in 1:nrow(fit_multiple_tidy)) {
  term <- fit_multiple_tidy$term[i]
  p_val <- fit_multiple_tidy$p.value[i]
  sig <- ifelse(p_val < 0.05, "Significant", "Not Significant")
  cat(sprintf("  %s: p-value = %.4f (%s)\n", term, p_val, sig))
}

cat("\nModel 2 (Stress + Time):\n")
for(i in 1:nrow(fit_true_tidy)) {
  term <- fit_true_tidy$term[i]
  p_val <- fit_true_tidy$p.value[i]
  sig <- ifelse(p_val < 0.05, "Significant", "Not Significant")
  cat(sprintf("  %s: p-value = %.4f (%s)\n", term, p_val, sig))
}

# Real-world implications discussion
cat("\nReal-world Implications:\n")
cat("1. R-squared Comparison:\n")
cat(sprintf("   - StressSurvey + Time model: R² = %.3f\n", r_squared_stresssurvey_time))
cat(sprintf("   - Stress + Time model: R² = %.3f\n", r_squared_stress_time))
cat("   - The true variable model should have higher R²\n\n")

cat("2. Coefficient Interpretation:\n")
cat("   - Both models control for confounding, reducing omitted variable bias\n")
cat("   - The Stress + Time model provides unbiased estimates of true relationships\n")
cat("   - The StressSurvey + Time model shows the effect of measurement error\n\n")

cat("3. Statistical Significance:\n")
cat("   - Both models should show significance for their respective variables\n")
cat("   - Significance doesn't guarantee causal interpretation\n")
cat("   - Model specification matters more than statistical significance\n\n")

cat("4. Key Lessons:\n")
cat("   - Using the correct variables (Stress vs StressSurvey) is crucial\n")
cat("   - Multiple regression helps control for confounding\n")
cat("   - High R² and significance don't guarantee correct causal inference\n")
cat("   - Real-world data often involves measurement error and omitted variables\n")
```
