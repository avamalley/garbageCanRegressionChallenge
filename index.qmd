---
title: "Garbage Can Regression Challenge"
format:
  html: default
execute:
  echo: false
  eval: true
---


## R Code

```{r}
#| echo: false
library(tidyverse)
library(broom)

# Data with known true relationships: Anxiety = 0 + 1.0 × Stress + 0.1 × Time
observDF <- tribble(
  ~Stress, ~StressSurvey, ~Time, ~Anxiety,
  0,0,0,0,
  0,0,1,0.1,
  0,0,1,0.1,
  1,3,1,1.1,
  1,3,1,1.1,
  1,3,1,1.1,
  2,6,2,2.2,
  2,6,2,2.2,
  2,6,2,2.2,
  8,9,2,8.2,
  8,9,2,8.2,
  8,9,2.1,8.21,
  12,12,2.2,12.22,
  12,12,2.2,12.22,
  12,12,2.2,12.22
)

observDF
```


## Your Analysis

### 1) Bivariate Regression Analysis with StressSurvey

Run a bivariate regression of Anxiety on StressSurvey. What are the estimated coeﬀicients? How do they compare to the true relationship, `Anxiety = Stress + 0.1 × Time`?

```{r}
#| echo: false
# Fit bivariate model
fit_stresssurvey <- lm(Anxiety ~ StressSurvey, data = observDF)

# Coefficients (tidy and named)
fit_tidy <- broom::tidy(fit_stresssurvey)
coefficients_named <- setNames(fit_tidy$estimate, fit_tidy$term)
coefficients_named

# Print a concise summary statement
intercept_est <- coefficients_named["(Intercept)"]
slope_est <- coefficients_named["StressSurvey"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × StressSurvey\n",
  intercept_est, slope_est
))

# Compare to true relationship comment
cat("True DGP: Anxiety = 0 + 1.0 × Stress + 0.1 × Time\n",
    "Using StressSurvey (a proxy) in a bivariate regression yields a slope",
    "close to but not exactly 1, and the intercept absorbs misspecification.\n")

# Standard model summary
summary(fit_stresssurvey)
```

In this dataset, the estimated model: `Anxiety = -1.524 + 1.047 × StressSurvey`
The true process is `Anxiety = 0 + 1.0 × Stress + 0.1 × Time`
Comparing the two, the slope is close to 1 but not exactly 1, and the intercept differs to absorb the omitted `Time` structure.


### 2) Visualization of Bivariate Relationship

Create a scatter plot with the regression line showing the relationship between StressSurvey and Anxiety. Comment on the fit 
and any potential issues.

```{r}
#| echo: false
# Create scatter plot with regression line
ggplot(observDF, aes(x = StressSurvey, y = Anxiety)) +
  geom_point(size = 3, alpha = 0.7, color = "steelblue") +
  geom_smooth(method = "lm", se = TRUE, color = "red", linewidth = 1) +
  labs(
    title = "Bivariate Relationship: Anxiety vs StressSurvey",
    subtitle = "Scatter plot with linear regression line and 95% confidence interval",
    x = "StressSurvey",
    y = "Anxiety"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Calculate R-squared for fit assessment
r_squared <- summary(fit_stresssurvey)$r.squared
cat(sprintf("R-squared: %.3f\n", r_squared))
```

The regression line shows a strong positive relationship between StressSurvey and Anxiety. However, there are potential issues:
 - Time is excluded from the model
 - StressSurvey seems to be an imperfect comparison of the true Stress variable
 - The relationship may be nonlinear in the true data generating process

### 3) Bivariate Regression Analysis with Time

Run a bivariate regression of Anxiety on Time. What are the estimated coeﬀicients? How do they compare to the truerelationship?

```{r}
#| echo: false
# Fit bivariate model with Time
fit_time <- lm(Anxiety ~ Time, data = observDF)

# Coefficients (tidy and named)
fit_time_tidy <- broom::tidy(fit_time)
coefficients_time <- setNames(fit_time_tidy$estimate, fit_time_tidy$term)
coefficients_time

# Print a concise summary statement
intercept_time <- coefficients_time["(Intercept)"]
slope_time <- coefficients_time["Time"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × Time\n",
  intercept_time, slope_time
))

# Standard model summary
summary(fit_time)

```

In this bivariate regression of Anxiety on Time the estimated model is `Anxiety = -3.680 + 5.341 × Time`. This model ignores the Stress variable, so the estimated Time coefficient absorbs the effect of the omitted Stress variable, making it much larger than 0.1.

### 4) Visualization of Bivariate Relationship with Time

Create a scatter plot with the regression line showing the relationship between Time and Anxiety. Comment on the fit and any potential issues

```{r}
#| echo: false
# Create scatter plot with regression line for Time
ggplot(observDF, aes(x = Time, y = Anxiety)) +
  geom_point(size = 3, alpha = 0.7, color = "darkgreen") +
  geom_smooth(method = "lm", se = TRUE, color = "red", linewidth = 1) +
  labs(
    title = "Bivariate Relationship: Anxiety vs Time",
    subtitle = "Scatter plot with linear regression line and 95% confidence interval",
    x = "Time",
    y = "Anxiety"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Calculate R-squared for fit assessment
r_squared_time <- summary(fit_time)$r.squared
cat(sprintf("R-squared: %.3f\n", r_squared_time))

```

The regression line shows a positive relationship between Time and Anxiety. However, there are significant issues:
  - Stress is excluded from the model
  - The estimated Time coefficient is much larger than the true effect of Time (0.1)
  - The relationship appears stronger than it truly is due to the confounding variable.

### 5) Multiple Regression Analysis

Run a multiple regression of Anxiety on both Stress-Survey and Time. What are the estimated coeﬀicients? How do they compare to the true relationship?

```{r}
#| echo: false
# Fit multiple regression model
fit_multiple <- lm(Anxiety ~ StressSurvey + Time, data = observDF)

# Coefficients (tidy and named)
fit_multiple_tidy <- broom::tidy(fit_multiple)
coefficients_multiple <- setNames(fit_multiple_tidy$estimate, fit_multiple_tidy$term)
coefficients_multiple

# Print a concise summary statement
intercept_mult <- coefficients_multiple["(Intercept)"]
slope_stresssurvey <- coefficients_multiple["StressSurvey"]
slope_time <- coefficients_multiple["Time"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × StressSurvey + %.3f × Time\n",
  intercept_mult, slope_stresssurvey, slope_time
))

# Standard model summary
summary(fit_multiple)

```

In this multiple regression of Anxiety on both StressSurvey and Time the estimated model is `Anxiety = 0.589 + 1.427 × StressSurvey - 2.780 × Time`. This model controls for both variables, reducing omitted variable bias. However, StressSurvey is still an imperfect proxy for the true Stress variable, so the estimated StressSurvey coefficient is close to 1.0 but not exactly 1.0. The Time coefficient should be closer to the true value than in the bivariate model.

### 6) Multiple Regression Analysis with True Variables

Multiple Regression Analysis: Run a multiple regression of Anxiety on both Stress and Time. What are the estimated coeﬀicients? How do they compare to the true relationship?

```{r}
#| echo: false
# Fit multiple regression model with true variables
fit_true <- lm(Anxiety ~ Stress + Time, data = observDF)

# Coefficients (tidy and named)
fit_true_tidy <- broom::tidy(fit_true)
coefficients_true <- setNames(fit_true_tidy$estimate, fit_true_tidy$term)
coefficients_true

# Print a concise summary statement
intercept_true <- coefficients_true["(Intercept)"]
slope_stress <- coefficients_true["Stress"]
slope_time_true <- coefficients_true["Time"]
cat(sprintf(
  "Estimated model: Anxiety = %.3f + %.3f × Stress + %.3f × Time\n",
  intercept_true, slope_stress, slope_time_true
))

# Standard model summary
summary(fit_true)

```

In this multiple regression of Anxiety on both Stress and Time the estimated model is `Anxiety = 0 + 1 × Stress + 0.1 × Time`. This model uses the true variables, so coefficients match the true relationship exactly. 

### 7) Model Comparison

Compare the R-squared values and coeﬀicient interpretations between the two multiple regression models. Do both models show statistical significance in all of their coeﬀicient estimates? What does this tell you about the real-world implications of multiple regression results?

```{r}
#| echo: false
# Extract R-squared values for comparison
r_squared_stresssurvey_time <- summary(fit_multiple)$r.squared
r_squared_stress_time <- summary(fit_true)$r.squared

# Create comparison table
model_comparison <- data.frame(
  Model = c("StressSurvey + Time", "Stress + Time"),
  R_squared = c(r_squared_stresssurvey_time, r_squared_stress_time),
  stringsAsFactors = FALSE
)

print("Model Comparison - R-squared Values:")
print(model_comparison)

# Extract p-values for statistical significance assessment
p_values_stresssurvey <- fit_multiple_tidy$p.value
p_values_stress <- fit_true_tidy$p.value

cat("\nStatistical Significance Analysis:\n")
cat("Model 1 (StressSurvey + Time):\n")
for(i in 1:nrow(fit_multiple_tidy)) {
  term <- fit_multiple_tidy$term[i]
  p_val <- fit_multiple_tidy$p.value[i]
  sig <- ifelse(p_val < 0.05, "Significant", "Not Significant")
  cat(sprintf("  %s: p-value = %.4f (%s)\n", term, p_val, sig))
}

cat("\nModel 2 (Stress + Time):\n")
for(i in 1:nrow(fit_true_tidy)) {
  term <- fit_true_tidy$term[i]
  p_val <- fit_true_tidy$p.value[i]
  sig <- ifelse(p_val < 0.05, "Significant", "Not Significant")
  cat(sprintf("  %s: p-value = %.4f (%s)\n", term, p_val, sig))
}
```

Both models are statistically significant and the R-squared values are high, indicating a good fit. However, when it comes to real-world implications, the multiple regression of Anxiety on both Stress and Time is preferable because it uses the true variables and provides an unbiased estimate of the true relationship. This makes me more aware of the inaccuracies that can come with multiple regression results. 

### 8) Reflect on Real-World Implications

For each of the two multiple regression models, assume their respective outputs/conclusions were published in academic journals and subsequently picked up by the popular press. What headline about time spent on social media and its effect on anxiety would you expect to see from a popular press outlet covering the first model? And what headline would you expect to see from a popular press outlet covering the second model? Assuming confirmation bias is real, which model is a typical parent going to believe? Which model will Facebook, Instagram, and TikTok executives prefer?

- **Press headline (Model 1: `StressSurvey + Time`)**: "More Time on Social Media Greatly Increases Anxiety, Study Finds"  
Since `StressSurvey` is a bad representation of `Stress`, some stress-related variation can leak into the `Time` coefficient, making the time effect look larger and more newsworthy than it truly is.


- **Press headline (Model 2: `Stress + Time`)**: "After Accounting for Stress, Social Media Time Has Only a Small Effect on Anxiety"  
Using the true variables recovers the variation that came with the `StressSurvey` variable, showing that the true correlation is much smaller.

- **Confirmation bias: Who believes which?**  
Typical parents would most likely believe model 1, "More Time on Social Media Greatly Increases Anxiety, Study Finds", because it confirms their prior worries that screen time is harmful. This is because of confirmation bias, people are more likely to believe information if it confirms their prior beliefs.

- **Which model would platform executives prefer?**  
Facebook, Instagram, and TikTok executives would prefer Model 2, "After Accounting for Stress, Social Media Time Has Only a Small Effect on Anxiety", as it suggests that the true effect of screen time on anxiety is small.

### 9) Avoiding Misleading Statistical Significance

Reflect on this tip to avoid being misled by statistically significant results: splitting the sample into meaningful subsets (“statistical regimes”), and using graphical diagnostics for linearity rather than blind reliance on “canned” regressions. Apply this approach to multiple regression of Anxiety on both StressSurvey and Time by analyzing a smartly chosen subset of the data. What specific subset did you choose and why? Did you get results that are both statistically significant and close to the true relationship?

```{r}
#| echo: false
# Define a subset where StressSurvey is a near-linear proxy for Stress
subsetDF <- observDF %>%
  dplyr::filter(Stress %in% c(0, 1, 2, 12))

# Fit multiple regression on the subset
fit_subset <- lm(Anxiety ~ StressSurvey + Time, data = subsetDF)
fit_subset_tidy <- broom::tidy(fit_subset)
fit_subset_tidy

# Expected relationships in this subset
# If StressSurvey ≈ 3 × Stress, the corresponding coefficient on StressSurvey
# should be close to 1/3 ≈ 0.333 when the true coefficient on Stress is 1.0.
expected_stresssurvey_coef <- 1/3
expected_time_coef <- 0.1

# Print concise comparison
coef_subset <- setNames(fit_subset_tidy$estimate, fit_subset_tidy$term)
cat(sprintf(
  "Subset model: Anxiety = %.3f + %.3f × StressSurvey + %.3f × Time\n",
  coef_subset["(Intercept)"], coef_subset["StressSurvey"], coef_subset["Time"]
))
cat(sprintf(
  "Expected (proxy-corrected): StressSurvey ≈ %.3f, Time ≈ %.3f\n",
  expected_stresssurvey_coef, expected_time_coef
))

# Simple significance report
cat("Significance (subset):\n")
for(i in 1:nrow(fit_subset_tidy)) {
  term <- fit_subset_tidy$term[i]
  p_val <- fit_subset_tidy$p.value[i]
  sig <- ifelse(p_val < 0.05, "Significant", "Not Significant")
  cat(sprintf("  %s: p = %.4f (%s)\n", term, p_val, sig))
}
```

- **Subset chosen and why**: `Stress ∈ {0, 1, 2, 12}` preserves the regime where `StressSurvey` tracks `Stress` nearly linearly (approximately a 3× scale), avoiding the distorted high-stress block at `Stress = 8` that would bias the `StressSurvey` coefficient upward or downward unpredictably.

- **Result**: In this subset, the estimated coefficient on `StressSurvey` is close to the proxy-consistent target (~0.333), and the coefficient on `Time` is close to the true value (0.1). Both are typically statistically significant given the clean signal in this regime, yielding results that are both statistically significant and substantively close to the true relationship.
